[{"/Users/stephenblair/Desktop/githunt/src/index.js":"1","/Users/stephenblair/Desktop/githunt/src/App.js":"2","/Users/stephenblair/Desktop/githunt/src/Feed.js":"3","/Users/stephenblair/Desktop/githunt/src/components/Brand.js":"4","/Users/stephenblair/Desktop/githunt/src/components/PageHeader.js":"5","/Users/stephenblair/Desktop/githunt/src/components/GroupTitle.js":"6","/Users/stephenblair/Desktop/githunt/src/components/Filters.js":"7","/Users/stephenblair/Desktop/githunt/src/components/Repo.js":"8","/Users/stephenblair/Desktop/githunt/src/components/PageLoader.js":"9"},{"size":329,"mtime":1610540733904,"results":"10","hashOfConfig":"11"},{"size":255,"mtime":1610541021593,"results":"12","hashOfConfig":"11"},{"size":3954,"mtime":1610649386330,"results":"13","hashOfConfig":"11"},{"size":511,"mtime":1610556937202,"results":"14","hashOfConfig":"11"},{"size":693,"mtime":1610544598312,"results":"15","hashOfConfig":"11"},{"size":774,"mtime":1610640921025,"results":"16","hashOfConfig":"11"},{"size":2775,"mtime":1610566443734,"results":"17","hashOfConfig":"11"},{"size":4537,"mtime":1610695499679,"results":"18","hashOfConfig":"11"},{"size":457,"mtime":1610645321193,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1dohajl",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/stephenblair/Desktop/githunt/src/index.js",[],["41","42"],"/Users/stephenblair/Desktop/githunt/src/App.js",[],"/Users/stephenblair/Desktop/githunt/src/Feed.js",["43","44"],"import React, { useState, useEffect } from 'react';\nimport { Box, Flex, SimpleGrid, Button } from '@chakra-ui/react';\nimport { PageHeader } from './components/PageHeader';\nimport { GroupTitle } from './components/GroupTitle';\nimport { Filters } from './components/Filters';\nimport { Repo } from './components/Repo';\nimport { PageLoader } from './components/PageLoader';\nimport moment from 'moment';\nimport useFetch from 'use-http';\n\n\nfunction transformFilters({ startDate, endDate, language}) {\n    const transformedFilters = {};\n\n    const languageQuery = language ? `language=${language}` : \"\";\n    const dateQuery = `created:${startDate}..${endDate}`;\n\n    transformedFilters.q = languageQuery + dateQuery;\n    transformedFilters.sort = \"stars\";\n    transformedFilters.order = \"desc\";\n\n    return transformedFilters;\n    \n\n\n}\nexport function Feed () {\n    const { loading, error, get} = useFetch('https://api.github.com');\n\n    const [viewType, setViewType] = useState('grid');\n    const [dateJump, setDateJump] = useState('day');\n    const [language, setLanguage]= useState('');\n    const [startDate, setStartDate] = useState('');\n    const [endDate, setEndDate] = useState(moment().subtract(1, 'day').format());\n    const [repositories, setRepositories] = useState([]);\n\n    useEffect(() => {\n       const endDate =  moment().subtract(1, 'day').format();\n       const startDate = moment(endDate).subtract(1, dateJump).format();\n       \n       setEndDate(endDate);\n       setStartDate(startDate);\n\n       setRepositories([]);\n    }, [dateJump, language]);\n\n    useEffect(() => {\n        if (!startDate) {\n            return\n        }\n\n        const filters = transformFilters({ language, startDate, endDate });\n        const filtersQuery = new URLSearchParams(filters).toString();\n        get(`/search/repositories?${filtersQuery}`).then((res) => {\n            setRepositories([\n                ...repositories,\n                {\n                    startDate,\n                    endDate,\n                    items: res.items,\n                }\n            ])\n        })\n    }, [startDate]);\n    return (\n        <Box maxWidth=\"1200px\" mx=\"auto\">\n            <PageHeader />\n            { repositories.length === 0 && loading && <PageLoader /> }\n            <Flex \n                alignItems=\"center\" \n                justifyContent=\"space-between\" \n              \n            >\n                <GroupTitle startDate={startDate} endDate={endDate} />\n                <Filters \n                    viewType={viewType}\n                    onViewChange={setViewType}\n                    dateJump={dateJump}\n                    onDateJumpChange={setDateJump}\n                    language={language}\n                    onLanguageChange={setLanguage}\n                />\n            </Flex>\n\n            {repositories.map((repoGroup, counter) => {\n                const groupTitle = counter > 0 && (\n                    <GroupTitle p=\"25px\"\n                            startDate={repoGroup.startDate}\n                            endDate={repoGroup.endDate}\n                    />\n                )\n                return (\n                    <Box> \n                        { groupTitle }\n                    <SimpleGrid columns={viewType === 'list' ? 1 : 3} spacing=\"15px\">\n                        {repoGroup.items.map(repo => <Repo isListView={viewType === 'list'} repo={repo} /> )}       \n                    </SimpleGrid>\n                    </Box>\n                )\n            })}\n   \n            <Flex alignItems=\"center\" justifyContent=\"center\" my=\"20px\" >\n                <Button \n                    isLoading={loading} \n                    mb=\"25px\"\n                    onClick={() => {\n                        setEndDate(startDate);\n                        setStartDate(moment(startDate).subtract(1, dateJump).format())\n                    }}\n                colorScheme=\"blue\">Load next group</Button>\n            </Flex>\n        </Box>\n    )\n}","/Users/stephenblair/Desktop/githunt/src/components/Brand.js",[],"/Users/stephenblair/Desktop/githunt/src/components/PageHeader.js",[],"/Users/stephenblair/Desktop/githunt/src/components/GroupTitle.js",[],"/Users/stephenblair/Desktop/githunt/src/components/Filters.js",["45"],"import React,  { useEffect, useState } from 'react';\nimport {  Button, Menu, MenuButton, MenuItem, MenuList, Select, Stack, Box } from '@chakra-ui/react';\nimport languages from '../data/languages.json';\nimport { FaCalendarAlt,  FaTable, FaList } from 'react-icons/fa';\n\nexport function Filters (props) {\n    const { \n        onViewChange,\n        onDateJumpChange,\n        dateJump,\n        language,\n        onLanguageChange, \n    } = props;\n    const [viewType, setViewType] = useState('grid');\n\n    useEffect( () => {\n        onViewChange(viewType);\n    }, [viewType]);\n\n    return (\n        <Stack isInline mb=\"25px\">\n            <Select bg=\"white\" value={language} onChange={(e) => onLanguageChange(e.target.value)}>\n                {languages.map((language) => (\n                    <option key={language.value} value={language.value}>{language.label}</option>\n                ))}\n            </Select>\n            <Menu>\n                <MenuButton \n                    textAlign=\"left\"\n                    w=\"250px\"\n                    justifyContent=\"flex-start\"\n                    as={Button} \n                    bg=\"white\" \n                    borderWidth={1} \n                    px=\"15px\" \n                    fontWeight={400}\n                    _focus={{ boxShadow: \"none\"}}\n                    leftIcon={<FaCalendarAlt />}\n                >\n                    <Box as=\"span\" textTransform=\"capitalize\">{ dateJump }</Box>\n                </MenuButton>\n                <MenuList>\n                    <MenuItem onClick={() => onDateJumpChange('day')}>Daily</MenuItem>\n                    <MenuItem onClick={() => onDateJumpChange('week')}>Weekly</MenuItem>\n                    <MenuItem onClick={() => onDateJumpChange('month')}>Monthly</MenuItem>\n                    <MenuItem onClick={() => onDateJumpChange('year')}>Yearly</MenuItem>\n                </MenuList>\n            </Menu>\n\n            <Stack isInline spacing={0} borderWidth={1} bg=\"white\" rounded=\"5px\" alignItems=\"center\" ml=\"10px\">\n                <Button \n                    h=\"100%\" \n                    onClick={() => setViewType('grid')}\n                    fontWeight={400} \n                    roundedRight={0} \n                    bg={ viewType === 'grid' ? 'gray.200' : 'white' }\n                    leftIcon={<FaTable />}\n                >\n                    Grid\n                </Button>\n                <Button \n                    h=\"100%\" \n                    onClick={() => setViewType('list')}\n                    fontWeight={400} \n                    roundedLeft={0} bg={ viewType === 'list' ? 'gray.200' : 'white' } \n                    leftIcon={<FaList />}\n                >\n                    List\n                </Button>\n            </Stack>\n        </Stack>\n    )\n}","/Users/stephenblair/Desktop/githunt/src/components/Repo.js",[],"/Users/stephenblair/Desktop/githunt/src/components/PageLoader.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":28,"column":22,"nodeType":"52","messageId":"53","endLine":28,"endColumn":27},{"ruleId":"54","severity":1,"message":"55","line":64,"column":8,"nodeType":"56","endLine":64,"endColumn":19,"suggestions":"57"},{"ruleId":"54","severity":1,"message":"58","line":18,"column":8,"nodeType":"56","endLine":18,"endColumn":18,"suggestions":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'endDate', 'get', 'language', and 'repositories'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setRepositories' needs the current value of 'endDate'.","ArrayExpression",["62"],"React Hook useEffect has a missing dependency: 'onViewChange'. Either include it or remove the dependency array.",["63"],"no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},"Update the dependencies array to be: [endDate, get, language, repositories, startDate]",{"range":"68","text":"69"},"Update the dependencies array to be: [onViewChange, viewType]",{"range":"70","text":"71"},[2083,2094],"[endDate, get, language, repositories, startDate]",[560,570],"[onViewChange, viewType]"]