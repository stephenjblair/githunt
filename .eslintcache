[{"/Users/stephenblair/Desktop/githunt/src/index.js":"1","/Users/stephenblair/Desktop/githunt/src/App.js":"2","/Users/stephenblair/Desktop/githunt/src/Feed.js":"3","/Users/stephenblair/Desktop/githunt/src/components/Brand.js":"4","/Users/stephenblair/Desktop/githunt/src/components/PageHeader.js":"5","/Users/stephenblair/Desktop/githunt/src/components/GroupTitle.js":"6","/Users/stephenblair/Desktop/githunt/src/components/Filters.js":"7","/Users/stephenblair/Desktop/githunt/src/components/Repo.js":"8"},{"size":329,"mtime":1610540733904,"results":"9","hashOfConfig":"10"},{"size":255,"mtime":1610541021593,"results":"11","hashOfConfig":"10"},{"size":3736,"mtime":1610642355092,"results":"12","hashOfConfig":"10"},{"size":511,"mtime":1610556937202,"results":"13","hashOfConfig":"10"},{"size":693,"mtime":1610544598312,"results":"14","hashOfConfig":"10"},{"size":774,"mtime":1610640921025,"results":"15","hashOfConfig":"10"},{"size":2775,"mtime":1610566443734,"results":"16","hashOfConfig":"10"},{"size":3996,"mtime":1610639827183,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1dohajl",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},"/Users/stephenblair/Desktop/githunt/src/index.js",[],["37","38"],"/Users/stephenblair/Desktop/githunt/src/App.js",[],"/Users/stephenblair/Desktop/githunt/src/Feed.js",["39","40"],"/Users/stephenblair/Desktop/githunt/src/components/Brand.js",[],"/Users/stephenblair/Desktop/githunt/src/components/PageHeader.js",[],"/Users/stephenblair/Desktop/githunt/src/components/GroupTitle.js",[],"/Users/stephenblair/Desktop/githunt/src/components/Filters.js",["41"],"import React,  { useEffect, useState } from 'react';\nimport {  Button, Menu, MenuButton, MenuItem, MenuList, Select, Stack, Box } from '@chakra-ui/react';\nimport languages from '../data/languages.json';\nimport { FaCalendarAlt,  FaTable, FaList } from 'react-icons/fa';\n\nexport function Filters (props) {\n    const { \n        onViewChange,\n        onDateJumpChange,\n        dateJump,\n        language,\n        onLanguageChange, \n    } = props;\n    const [viewType, setViewType] = useState('grid');\n\n    useEffect( () => {\n        onViewChange(viewType);\n    }, [viewType]);\n\n    return (\n        <Stack isInline mb=\"25px\">\n            <Select bg=\"white\" value={language} onChange={(e) => onLanguageChange(e.target.value)}>\n                {languages.map((language) => (\n                    <option key={language.value} value={language.value}>{language.label}</option>\n                ))}\n            </Select>\n            <Menu>\n                <MenuButton \n                    textAlign=\"left\"\n                    w=\"250px\"\n                    justifyContent=\"flex-start\"\n                    as={Button} \n                    bg=\"white\" \n                    borderWidth={1} \n                    px=\"15px\" \n                    fontWeight={400}\n                    _focus={{ boxShadow: \"none\"}}\n                    leftIcon={<FaCalendarAlt />}\n                >\n                    <Box as=\"span\" textTransform=\"capitalize\">{ dateJump }</Box>\n                </MenuButton>\n                <MenuList>\n                    <MenuItem onClick={() => onDateJumpChange('day')}>Daily</MenuItem>\n                    <MenuItem onClick={() => onDateJumpChange('week')}>Weekly</MenuItem>\n                    <MenuItem onClick={() => onDateJumpChange('month')}>Monthly</MenuItem>\n                    <MenuItem onClick={() => onDateJumpChange('year')}>Yearly</MenuItem>\n                </MenuList>\n            </Menu>\n\n            <Stack isInline spacing={0} borderWidth={1} bg=\"white\" rounded=\"5px\" alignItems=\"center\" ml=\"10px\">\n                <Button \n                    h=\"100%\" \n                    onClick={() => setViewType('grid')}\n                    fontWeight={400} \n                    roundedRight={0} \n                    bg={ viewType === 'grid' ? 'gray.200' : 'white' }\n                    leftIcon={<FaTable />}\n                >\n                    Grid\n                </Button>\n                <Button \n                    h=\"100%\" \n                    onClick={() => setViewType('list')}\n                    fontWeight={400} \n                    roundedLeft={0} bg={ viewType === 'list' ? 'gray.200' : 'white' } \n                    leftIcon={<FaList />}\n                >\n                    List\n                </Button>\n            </Stack>\n        </Stack>\n    )\n}","/Users/stephenblair/Desktop/githunt/src/components/Repo.js",["42"],"import React from 'react';\nimport { Box, Flex, Image, Heading, Text, Link, Stack, Button } from '@chakra-ui/react';\nimport image from '../img/logo.svg'\nimport { FaStar } from 'react-icons/fa';\nimport { AiOutlineFork } from 'react-icons/ai';\nimport { VscIssues } from 'react-icons/vsc';\n\nexport function Repo (props) {\n    const { isListView = false, repo } = props;\n    return (\n        <Flex \n            borderWidth={1} \n            bg=\"white\" \n            p=\"15px\" \n            rounded=\"5px\" \n            alignItems=\"flex-start\"\n        >\n            <Flex flex={1} flexDir=\"column\">\n                {!isListView && (\n                    <Flex mb=\"15px\" as=\"a\" href=\"https://www.github.com\">\n                        <Image \n                        src={image} \n                        w={\"35px\"} \n                        h={\"35px\"} \n                        rounded=\"5px\"\n                    />\n                <Box ml=\"10px\">\n                    <Heading fontSize=\"16px\">Stephen Blair</Heading>\n                    <Text font-size=\"13px\">View profile</Text>\n                </Box>\n            </Flex>\n            )}\n            <Box mb=\"15px\">\n                <Box mb=\"10px\">\n                    <Flex fontSize=\"19px\" fontWeight={700} color=\"purple.700\" mb=\"3px\">\n                        {isListView && (\n                            <>\n                                <Text \n                                    as =\"a\" \n                                    href=\"http://www.github.com\" \n                                    target=\"_blank\"\n                                >\n                                    Stephen Blair\n                                </Text>\n                                &nbsp;/&nbsp;\n                            </>\n                        )}\n                        <Text \n                            as =\"a\" \n                            href=\"http://www.github.com\" \n                            target=\"_blank\"\n                        >\n                            githunt\n                        </Text>\n                    </Flex>\n                    <Text \n                        fontSize=\"14px\"\n                        color=\"gray.600\">Built by &middot;  \n                            <Link \n                                fontWeight={600}\n                                href=\"http://www.google.com\" \n                                target=\"_blank\">Stephen Blair\n                            </Link> &middot; January 13th 2021\n                    </Text>\n                </Box>\n                <Text \n                    fontSize=\"14px\" \n                    color=\"gray.900\">Find the most starred projects for any date on GitHub\n                </Text>\n            </Box>\n            <Stack isInline spacing=\"10px\">\n                <Button \n                    as=\"a\" \n                    cursor=\"pointer\" \n                    leftIcon={<FaStar />} \n                    variant=\"link\" \n                    fontSize=\"14px\" \n                    iconSpacing=\"4px\" \n                    _hover={{textDecoration: 'none'}}>3847s\n                </Button>\n                <Button \n                    as=\"a\" \n                    cursor=\"pointer\" \n                    leftIcon={<AiOutlineFork />} \n                    variant=\"link\" \n                    fontSize=\"14px\" \n                    iconSpacing=\"4px\" \n                    _hover={{textDecoration: 'none'}}>3847s\n                </Button>\n                <Button \n                    as=\"a\" \n                    cursor=\"pointer\" \n                    leftIcon={<VscIssues />} \n                    variant=\"link\" \n                    fontSize=\"14px\" \n                    iconSpacing=\"4px\" \n                    _hover={{textDecoration: 'none'}}>3847\n                </Button>\n            </Stack>\n        </Flex>\n        {isListView && (\n            <Image\n                src={image}\n                w={\"105px\"}\n                h={\"105px\"}\n                rounded=\"100%\"\n            />\n        )}\n    </Flex>\n    )\n}",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":27,"column":22,"nodeType":"49","messageId":"50","endLine":27,"endColumn":27},{"ruleId":"51","severity":1,"message":"52","line":63,"column":8,"nodeType":"53","endLine":63,"endColumn":19,"suggestions":"54"},{"ruleId":"51","severity":1,"message":"55","line":18,"column":8,"nodeType":"53","endLine":18,"endColumn":18,"suggestions":"56"},{"ruleId":"47","severity":1,"message":"57","line":9,"column":33,"nodeType":"49","messageId":"50","endLine":9,"endColumn":37},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'endDate', 'get', 'language', and 'repositories'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setRepositories' needs the current value of 'endDate'.","ArrayExpression",["60"],"React Hook useEffect has a missing dependency: 'onViewChange'. Either include it or remove the dependency array.",["61"],"'repo' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},"Update the dependencies array to be: [endDate, get, language, repositories, startDate]",{"range":"66","text":"67"},"Update the dependencies array to be: [onViewChange, viewType]",{"range":"68","text":"69"},[2029,2040],"[endDate, get, language, repositories, startDate]",[560,570],"[onViewChange, viewType]"]